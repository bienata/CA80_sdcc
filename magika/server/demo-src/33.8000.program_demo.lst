0000-                  4               .sf 33.8000.program_demo.sym
0000-                  5               .in ca80.inc
0000-            I     1                               ; ciagle uzupelniam ...
00E0-            I     2       USER8255        .eq             $E0
0000-            I     3       PA                      .eq             0
0001-            I     4       PB                      .eq             1
0002-            I     5       PC                      .eq             2
0003-            I     6       CTRL            .eq             3
0000-            I     7                               ;
0000-            I     8
0000-            I     9
00E8-            I    10       Z80SIO      .eq     $E8
00E8-            I    11       SIO_A_DAT   .eq     Z80SIO+0
00E9-            I    12       SIO_B_DAT   .eq     Z80SIO+1
00EA-            I    13       SIO_A_CMD   .eq     Z80SIO+2
00EB-            I    14       SIO_B_CMD   .eq     Z80SIO+3
0000-            I    15
00F8-            I    16       Z80CTC      .eq     $F8
00F8-            I    17       CTC_CH0     .eq     Z80CTC+0
00F9-            I    18       CTC_CH1     .eq     Z80CTC+1
00FA-            I    19       CTC_CH2     .eq     Z80CTC+2
00FB-            I    20       CTC_CH3     .eq     Z80CTC+3
0000-            I    21
0000-            I    22
FFF7-            I    23       CYF0        .eq $FFF7
FFF8-            I    24       CYF1        .eq $FFF8
FFF9-            I    25       CYF2        .eq $FFF9
FFFA-            I    26       CYF3        .eq $FFFA
FFFB-            I    27       CYF4        .eq $FFFB
FFFC-            I    28       CYF5        .eq $FFFC
FFFD-            I    29       CYF6        .eq $FFFD
FFFE-            I    30       CYF7        .eq $FFFE
0000-            I    31
0010-            I    32       CLR                 .eq $0010   ; CLR - kasowanie wyswietlacza
0018-            I    33       LBYTE       .eq $0018   ; LBYTE - wyswietlenie Aku w HEX
0020-            I    34       LADR        .eq $0020   ; LADR - wyswietlenie HL w HEX
022D-            I    35       CZAS        .eq $022D   ; CZAS - pokazuje czas/date
01AB-            I    36       COM                 .eq $01AB   ; COM - pokazuje znak 7-seg z rejestru C
01D4-            I    37       PRINT       .eq $01D4   ; PRINT - drukuje komunikat z (HL)
0213-            I    38       EXPR        .eq $0213   ; EXPR - pobranie ciagu liczb 16bit na stos
FFC3-            I    39       CSTS        .eq $FFC3   ; CSTS - test czy klawisz nacisniety
FFC6-            I    40       CI          .eq $FFC6   ; CI - pobranie znaku z klawiatury
01E0-            I    41       CO          .eq $01E0   ; CO - wyswietlenie cyfry hex
0007-            I    42       TI          .eq $0007   ; TI - pobranie znaku z echem
01F4-            I    43       PARAM       .eq $01F4   ; PARAM - pobranie liczby 16-bit do HL z echem
023B-            I    44       HILO        .eq $023b   ; HILO - iterator, HL++, CY = !(DE >= HL)
0626-            I    45       ZMAG        .eq $0626   ; zapis bloku pamięci na magnetofon
067B-            I    46       ZEOF        .eq $067b   ; zapis rekordu EOF
071B-            I    47       OMAG        .eq $071B   ; odczyt bloku danych lub EOF-a o zadanej nazwie pod adres zapisany w zbiorze
0000-            I    48                   ;
00FF-            I    49       EOM         .eq $FF
0000-            I    50
0000-            I    51
0000-                  6
0000-                  7       ADDR_LO .eq 0
0001-                  8       ADDR_HI .eq 1
0000-                  9
0000-                 10               .sm code                    ;
0000-                 11
8000-                 12               .or $8000                   ;
8000-                 13                       ;
8000-                 14       .begin
8000-DD 21 1A 80      15 ( 14)         ld IX,messageTable          ; adres tabeli komunikatów
8004-06 0F            16 (  7)         ld B,messageTableLength     ; licznik komunikatów
8006-                 17       .loop
8006-DD 6E 00         18 ( 19)                 ld L,(IX+ADDR_LO)                 ; do HL adres wybranego via wskaznik
8009-DD 66 01         19 ( 19)         ld H,(IX+ADDR_HI)                 ; z IX komunikatu w kolejności LSB, MSB
800C-CD D4 01         20 ( 17)                 call PRINT                  ; pokaż znaki
800F-80               21                       .db $80                     ; na cały wyświetlacz
8010-CD 80 80         22 ( 17)                 call delay                  ; opóznienie
8013-DD 23            23 ( 10)         inc IX                      ;
8015-DD 23            24 ( 10)         inc IX                      ; IX += 2 kolejny wskaźnik
8017-10 ED            25 ( 8+)         djnz .loop                  ; while(--licznik)
8019-                 26                       ;
8019-C9               27 ( 10)                 ret
801A-                 28                       ;
801A-                 29       messageTable:
801A-38 80            30               .dw message1
801C-41 80            31               .dw message2
801E-4A 80            32               .dw message3
8020-53 80            33               .dw message4
8022-5C 80            34               .dw message5
8024-65 80            35               .dw message6
8026-6E 80            36               .dw message7
8028-77 80            37               .dw message8
802A-6E 80            38               .dw message7
802C-65 80            39               .dw message6
802E-5C 80            40               .dw message5
8030-53 80            41               .dw message4
8032-4A 80            42               .dw message3
8034-41 80            43               .dw message2
8036-38 80            44               .dw message1
000F-                 45       messageTableLength  .eq $-messageTable/2
8038-                 46                       ;
8038-                 47       message1:
8038-5C 00 00 00 
     00 00 00 00 
     FF               48               .db     $5c,$00,$00, $00, $00, $00, $00, $00, EOM
8041-                 49       message2:
8041-00 5C 00 00 
     00 00 00 00 
     FF               50               .db     $00,$5c,$00, $00, $00, $00, $00, $00, EOM
804A-                 51       message3:
804A-00 00 5C 00 
     00 00 00 00 
     FF               52               .db     $00,$00, $5c,$00, $00, $00, $00, $00, EOM
8053-                 53       message4:
8053-00 00 00 5C 
     00 00 00 00 
     FF               54               .db     $00,$00, $00, $5c,$00, $00, $00, $00, EOM
805C-                 55       message5:
805C-00 00 00 00 
     5C 00 00 00 
     FF               56               .db     $00,$00, $00, $00, $5c,$00, $00, $00, EOM
8065-                 57       message6:
8065-00 00 00 00 
     00 5C 00 00 
     FF               58               .db     $00,$00, $00, $00, $00, $5c,$00, $00, EOM
806E-                 59       message7:
806E-00 00 00 00 
     00 00 5C 00 
     FF               60               .db     $00,$00, $00, $00, $00, $00,$5c, $00, EOM
8077-                 61       message8:
8077-00 00 00 00 
     00 00 00 5C 
     FF               62               .db     $00,$00, $00, $00, $00, $00, $00, $5c,EOM
8080-                 63               ;
8080-C5               64 ( 11) delay:  push    BC
8081-F5               65 ( 11)         push    AF
8082-06 FF            66 (  7)         ld      B,$FF
8084-                 67       .delay
8084-76               68 (  4)         halt            ; 2ms
8085-10 FD            69 ( 8+)         djnz    .delay  ; while( --B )
8087-F1               70 ( 10)         pop     AF
8088-C1               71 ( 10)         pop     BC
8089-C9               72 ( 10)         ret
808A-                 73
808A-                 74                       ;
808A-                 75
